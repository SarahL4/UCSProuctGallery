@model IEnumerable<UCSProductGallery.Models.Product>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <title>Product List</title>
</head>
<body class="bg-gray-100 p-6">
    <div class="container mx-auto">
        <div class="flex justify-between items-center mb-4">
            <h1 class="text-2xl font-bold">Product Gallery</h1>
            <form asp-action="SyncProducts" method="post">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Update Products with API data
                </button>
            </form>
        </div>

        @if (TempData["Message"] != null)
        {
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                @TempData["Message"]
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                @TempData["Error"]
            </div>
        }

        <div class="flex flex-col md:flex-row">
            <div class="w-full md:w-1/4 bg-white p-4 rounded shadow mb-4 md:mb-0">
                <h2 class="text-lg font-semibold mb-2">Categories</h2>
                <div>
                    @{
                        var categories = Model.Where(p => !string.IsNullOrEmpty(p.CategoryName))
                                              .Select(p => p.CategoryName)
                                              .Distinct()
                                              .OrderBy(c => c);
                    }
                    @foreach (var category in categories)
                    {
                        <label class="block">
                            <input type="checkbox" class="mr-2 category-filter" data-category="@category"> @(!string.IsNullOrEmpty(category) ? char.ToUpper(category[0]) + category.Substring(1) : category)
                        </label>
                    }
                </div>
            </div>
            <div class="w-full md:w-3/4 md:ml-4">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var product in Model)
                        {
                            <div class="bg-white p-4 rounded shadow product-card" data-category="@product.CategoryName">
                                @if (!string.IsNullOrEmpty(product.Thumbnail))
                                {
                                    <img src="@product.Thumbnail" alt="@product.Title" class="w-full h-32 object-cover mb-2 rounded">
                                }
                                else if (product.Images != null && product.Images.Any())
                                {
                                    var mainImage = product.Images.FirstOrDefault(i => i.IsMain) ?? product.Images.First();
                                    <img src="@mainImage.ImageUrl" alt="@product.Title" class="w-full h-32 object-cover mb-2 rounded">
                                }
                                <h3 class="font-semibold">@product.Title</h3>
                                <p>@product.Price kr</p>
                                <p class="text-sm text-gray-500">@product.CategoryName</p>
                                <a href="@Url.Action("Details", "Product", new { id = product.Id })" class="inline-block mt-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                    Details
                                </a>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-span-3 p-4 bg-gray-50 rounded text-center">
                            <p>No products found. Click "Update Products" button to fetch products from the API.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Category filter functionality
            const categoryFilters = document.querySelectorAll('.category-filter');
            const productCards = document.querySelectorAll('.product-card');

            categoryFilters.forEach(filter => {
                filter.addEventListener('change', applyFilters);
            });

            function applyFilters() {
                const selectedCategories = Array.from(document.querySelectorAll('.category-filter:checked'))
                    .map(checkbox => checkbox.dataset.category);

                productCards.forEach(card => {
                    if (selectedCategories.length === 0 || selectedCategories.includes(card.dataset.category)) {
                        card.style.display = '';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }
        });
    </script>
</body>
</html>
